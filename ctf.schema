--
-- PostgreSQL database dump
--

-- Dumped from database version 11.14
-- Dumped by pg_dump version 14.1

SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;

--
-- Name: pgcrypto; Type: EXTENSION; Schema: -; Owner: -
--

CREATE EXTENSION IF NOT EXISTS pgcrypto WITH SCHEMA public;


--
-- Name: EXTENSION pgcrypto; Type: COMMENT; Schema: -; Owner: -
--

COMMENT ON EXTENSION pgcrypto IS 'cryptographic functions';


--
-- Name: check_submission(text); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.check_submission(submission text) RETURNS boolean
    LANGUAGE sql
    AS $$
SELECT (CASE WHEN COUNT(*) > 0 THEN true ELSE false END) FROM flags f WHERE submission ~* f.regexp
 $$;


--
-- Name: solved(text); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.solved(team_name text) RETURNS TABLE(name text, flag text, solved_time text, points integer, parent integer)
    LANGUAGE sql
    AS $$
SELECT f.name, s.submission, COALESCE(to_char(s.timestamp, 'YYYY-MM-DD HH24:MI:SS'), '- -'), f.points, f.parent FROM v_solves vs LEFT JOIN teams t ON vs.team_id=t.id LEFT JOIN flags f ON vs.flag_id=f.id LEFT JOIN submissions s ON vs.submissions[1]=s.id WHERE t.name=team_name AND f.name IS NOT NULL $$;


--
-- Name: submit(text, text); Type: PROCEDURE; Schema: public; Owner: -
--

CREATE PROCEDURE public.submit(team_name text, submission text)
    LANGUAGE sql
    AS $$
INSERT INTO submissions (team_id, submission)  SELECT id, submission FROM teams WHERE name=team_name;
$$;


--
-- Name: unsolved(text); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.unsolved(team_name text) RETURNS TABLE(flag_name text, points integer)
    LANGUAGE sql
    AS $$
SELECT f.name, f.points FROM flags f LEFT JOIN (SELECT team_id, flag_id FROM v_solves vs LEFT JOIN teams t ON vs.team_id=t.id WHERE t.name=team_name) AS ts ON ts.flag_id=f.id WHERE ts.flag_id IS NULL AND f.visible AND f.enabled AND f.solvable UNION SELECT f.name, (f.points - cp)::int points FROM flags f LEFT JOIN (SELECT team_id, flag_id FROM v_solves vs LEFT JOIN teams t ON vs.team_id=t.id WHERE t.name=team_name) AS ts ON ts.flag_id=f.id LEFT JOIN (SELECT parent, SUM(points) cp from solved(team_name) GROUP BY parent) AS sc ON sc.parent=f.id WHERE ts.flag_id IS NULL AND f.visible AND f.enabled AND NOT f.solvable$$;


SET default_tablespace = '';

--
-- Name: attachments; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.attachments (
    name text,
    uri text,
    flag_id integer,
    id integer NOT NULL
);


--
-- Name: attachments_id_seq; Type: SEQUENCE; Schema: public; Owner: -
--

ALTER TABLE public.attachments ALTER COLUMN id ADD GENERATED ALWAYS AS IDENTITY (
    SEQUENCE NAME public.attachments_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: flags; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.flags (
    id integer NOT NULL,
    visible boolean DEFAULT true,
    enabled boolean DEFAULT true,
    name text,
    description text DEFAULT ''::text,
    points integer,
    regexp text,
    solvable boolean DEFAULT true,
    parent integer
);


--
-- Name: flags_id_seq; Type: SEQUENCE; Schema: public; Owner: -
--

ALTER TABLE public.flags ALTER COLUMN id ADD GENERATED ALWAYS AS IDENTITY (
    SEQUENCE NAME public.flags_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: ssh_keys; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.ssh_keys (
    key text,
    id integer NOT NULL,
    team_id integer
);


--
-- Name: ssh_keys_id_seq; Type: SEQUENCE; Schema: public; Owner: -
--

ALTER TABLE public.ssh_keys ALTER COLUMN id ADD GENERATED ALWAYS AS IDENTITY (
    SEQUENCE NAME public.ssh_keys_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: submissions; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.submissions (
    id integer NOT NULL,
    team_id integer,
    submission text,
    "timestamp" timestamp without time zone DEFAULT CURRENT_TIMESTAMP
);


--
-- Name: submissions_id_seq; Type: SEQUENCE; Schema: public; Owner: -
--

ALTER TABLE public.submissions ALTER COLUMN id ADD GENERATED ALWAYS AS IDENTITY (
    SEQUENCE NAME public.submissions_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: teams; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.teams (
    id integer NOT NULL,
    name text,
    enabled boolean,
    hash text
);


--
-- Name: teams_id_seq; Type: SEQUENCE; Schema: public; Owner: -
--

ALTER TABLE public.teams ALTER COLUMN id ADD GENERATED ALWAYS AS IDENTITY (
    SEQUENCE NAME public.teams_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: v_flag_info; Type: VIEW; Schema: public; Owner: -
--

CREATE VIEW public.v_flag_info AS
SELECT
    NULL::text AS name,
    NULL::integer AS id,
    NULL::bigint AS solves,
    NULL::text[] AS teams;


--
-- Name: v_solves; Type: VIEW; Schema: public; Owner: -
--

CREATE VIEW public.v_solves AS
 SELECT t.id AS team_id,
    f.id AS flag_id,
    array_agg(s.id ORDER BY s.id) AS submissions
   FROM ((public.submissions s
     LEFT JOIN public.teams t ON ((s.team_id = t.id)))
     LEFT JOIN public.flags f ON ((s.submission ~* f.regexp)))
  WHERE f.enabled
  GROUP BY t.id, f.id;


--
-- Name: v_scoreboard; Type: VIEW; Schema: public; Owner: -
--

CREATE VIEW public.v_scoreboard AS
 SELECT row_number() OVER (ORDER BY (sum(f.points)) DESC) AS place,
    t.name,
    sum(f.points) AS score
   FROM ((public.v_solves vs
     LEFT JOIN public.teams t ON ((t.id = vs.team_id)))
     LEFT JOIN public.flags f ON ((vs.flag_id = f.id)))
  GROUP BY t.name
  ORDER BY (sum(f.points)) DESC;


--
-- Name: v_submission_count; Type: VIEW; Schema: public; Owner: -
--

CREATE VIEW public.v_submission_count AS
 SELECT submissions.team_id,
    count(*) AS attempts
   FROM public.submissions
  GROUP BY submissions.team_id;


--
-- Name: v_team_flags; Type: VIEW; Schema: public; Owner: -
--

CREATE VIEW public.v_team_flags AS
 SELECT v_solves.team_id,
    count(v_solves.flag_id) AS flag_count,
    array_agg(v_solves.flag_id) AS flags
   FROM public.v_solves
  GROUP BY v_solves.team_id;


--
-- Name: v_team_info; Type: VIEW; Schema: public; Owner: -
--

CREATE VIEW public.v_team_info AS
 SELECT t.name,
    t.id,
    COALESCE(tf.flag_count, (0)::bigint) AS flag_count,
    tf.flags,
    COALESCE(sc.attempts, (0)::bigint) AS submission_attempts
   FROM ((public.teams t
     LEFT JOIN public.v_team_flags tf ON ((t.id = tf.team_id)))
     LEFT JOIN public.v_submission_count sc ON ((sc.team_id = t.id)));


--
-- Name: v_valid_submissions; Type: VIEW; Schema: public; Owner: -
--

CREATE VIEW public.v_valid_submissions AS
 SELECT COALESCE(to_char(s."timestamp", 'YYYY-MM-DD HH24:MI:SS'::text), '- -'::text) AS "time",
    t.name AS team_name,
    f.name AS flag_name
   FROM (((public.submissions s
     LEFT JOIN public.v_solves vs ON ((ARRAY[s.id] <@ vs.submissions)))
     LEFT JOIN public.teams t ON ((t.id = vs.team_id)))
     LEFT JOIN public.flags f ON ((vs.flag_id = f.id)))
  WHERE (f.id IS NOT NULL);


--
-- Name: attachments attachments_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.attachments
    ADD CONSTRAINT attachments_pkey PRIMARY KEY (id);


--
-- Name: flags flags_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.flags
    ADD CONSTRAINT flags_pkey PRIMARY KEY (id);


--
-- Name: ssh_keys ssh_keys_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.ssh_keys
    ADD CONSTRAINT ssh_keys_pkey PRIMARY KEY (id);


--
-- Name: submissions submissions_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.submissions
    ADD CONSTRAINT submissions_pkey PRIMARY KEY (id);


--
-- Name: teams teams_name_unique; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.teams
    ADD CONSTRAINT teams_name_unique UNIQUE (name);


--
-- Name: teams teams_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.teams
    ADD CONSTRAINT teams_pkey PRIMARY KEY (id);


--
-- Name: v_flag_info _RETURN; Type: RULE; Schema: public; Owner: -
--

CREATE OR REPLACE VIEW public.v_flag_info AS
 SELECT f.name,
    f.id,
    count(vs.team_id) AS solves,
    array_agg(t.name) AS teams
   FROM ((public.flags f
     LEFT JOIN public.v_solves vs ON ((f.id = vs.flag_id)))
     LEFT JOIN public.teams t ON ((vs.team_id = t.id)))
  GROUP BY f.id;


--
-- Name: attachments attachments_flag_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.attachments
    ADD CONSTRAINT attachments_flag_id_fkey FOREIGN KEY (flag_id) REFERENCES public.flags(id);


--
-- Name: flags flag_parent_fkey; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.flags
    ADD CONSTRAINT flag_parent_fkey FOREIGN KEY (parent) REFERENCES public.flags(id);


--
-- Name: ssh_keys ssh_keys_team_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.ssh_keys
    ADD CONSTRAINT ssh_keys_team_id_fkey FOREIGN KEY (team_id) REFERENCES public.teams(id);


--
-- Name: submissions submissions_team_fkey; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.submissions
    ADD CONSTRAINT submissions_team_fkey FOREIGN KEY (team_id) REFERENCES public.teams(id);


--
-- PostgreSQL database dump complete
--

